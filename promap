#!/usr/bin/env bash

# PRO-seq mapping pipeline.
#
# Process FASTQ PRO-seq reads and create BAM files.
#
# Usage: ./promap [optional path to promap.cfg]
#
# Requirements:
# - umi_tools     --- https://github.com/CGATOxford/UMI-tools
# - fastx-toolkit --- http://hannonlab.cshl.edu/fastx_toolkit
# - bowtie        --- http://bowtie-bio.sourceforge.net
# - samtools      --- http://www.htslib.org
# - bedtools      --- https://bedtools.readthedocs.io
#
# Written at the University of Connecticut by Luke Wojenski and
# Pariksheet Nanda in 2018.
#
# Released into the Public Domain:
# https://creativecommons.org/publicdomain/zero/1.0/legalcode


# Global variables.
declare -A config
declare -A current


# Exit if any dependencies are missing.
#
# Globals: None
# Arguments: None
check_dependencies() {
    local deps dep is_missing missing

    missing=0
    declare -A deps
    deps=(
	[umi_tools]=https://github.com/CGATOxford/UMI-tools
	[fastx_clipper]=http://hannonlab.cshl.edu/fastx_toolkit
	[bowtie]=http://bowtie-bio.sourceforge.net
	[samtools]=http://www.htslib.org
	[bedtools]=https://bedtools.readthedocs.io
    )

    for dep in ${!deps[@]}; do
	command -v $dep > /dev/null || (( is_missing=1 ))
	if [[ $is_missing -eq 1 ]]; then
	    (( missing+=1 ))
	    is_missing=
	else
	    deps[$dep]=found
	fi
    done

    if [[ $missing -ne 0 ]]; then
	echo >&2 "Error: $missing missing dependencies.  Please install:"
	for dep in ${!deps[@]}; do
	    if ! [[ "${deps[$dep]}" == found ]]; then
		echo >&2 "- $dep --- ${deps[$dep]}"
	    fi
	done
	exit 1
    fi
}


# Read configuration file key=value lines.
#
# Globals: config
# Arguments:
#  $1 (optional) path to promap.cfg file.
# Returns: None
config_read() {
    local file_config line key

    if [[ -z "$1" ]]; then
	file_config="promap.cfg"
    else
	file_config="$1"
    fi

    if ! [[ -f "$file_config" ]]; then
	echo >&2 "Error: no such input file: $file_config"
	exit 1
    fi

    # Securely populate bash array from input file, guarded from code
    # injection per https://unix.stackexchange.com/a/206216
    config=(
	# Set default values in config array.
	#
	### Inputs. ###
	#
	[tmp_dir]=/tmp
	[umi_pattern]=NNNNNN
	[adapter]=
	[read_length_min]=25
	# Bowtie genome file "prefix".
	[bowtie_genome_prefix]=
	# Filter out rDNA using NCBI rDNA genome reference.
	[bowtie_rdna_dir]=
	# Concatenated genomes of sample genome and spike-in genome.
	[bedtools_chrominfo_file]=
	#
	### Outputs. ###
	#
	# Save log of each step.
	[log_dir]=log
	# Most of these are pretty self-explanatory.
	[reads_dir]=fastq
	[align_ribosome_dir]=sam_rdna
	[align_bam_dir]=bam
	# View processed reads on the UCSC genome browser.
	[align_bigwig_dir]=bigwig
    )
    while read line
    do
	if echo $line | grep -F = &>/dev/null
	then
	    key=$(echo "$line" | cut -d '=' -f 1)
	    config[$key]=$(echo "$line" | cut -d '=' -f 2-)
	fi
    done < $file_config
}


# Check that file exists and is not empty.
#
# Globals: None
# Arguments:
#  $1 file
# Returns: Exit code
is_non_empty_file() {
    local file

    file=$1
    if [[ -f $file ]] &&
	   [[ $(wc -c < $file) -ge 0 ]]; then
	echo "  ...output already exits: $file"
    else
	return 1
    fi
}


# Extract UMIs and concatenate them to the fastq names.
#
# Globals: config current
# Arguments: None
# Returns: Minimal description of processing.
umi_extract() {
    local log

    log=${current[log_dir]}/01_umi_extract.log
    current[file_umi]=${config[tmp_dir]}/${current[prefix]}_umi_extracted.fastq
    echo "- Extracting UMIs with pattern ${config[umi_pattern]}..."
    is_non_empty_file ${current[file_umi]} && return

    umi_tools \
	extract \
	--extract-method=string \
	--bc-pattern=${config[umi_pattern]} \
	-L $log \
	-I ${current[file_reads]} \
	-S ${current[file_umi]} 1>/dev/null || {
	echo >&2 "  ...error encountered!  Check $log"
	exit 1
    }

    echo "  ...saved file: ${current[file_umi]}"
}


# Extract UMIs and concatenate them to the fastq names.
#
# Globals: config current
# Arguments: None
# Returns: Minimal description of processing.
clip() {
    local log

    log=${current[log_dir]}/02_clip.log
    current[file_clipped]=${config[tmp_dir]}/${current[prefix]}_clipped.fastq
    echo "- Clipping adapter ${config[adapter]} and discarding reads < ${config[read_length_min]} bp..."
    is_non_empty_file ${current[file_clipped]} && return

    fastx_clipper \
	-Q33 \
	-i ${current[file_umi]} \
	-o ${current[file_clipped]} \
	-a ${config[adapter]} \
	-l ${config[read_length_min]} |& tee $log || {
	echo >&2 "...error encountered!  Check $log"
	exit 1
    }

    echo "  ... saved file: ${current[file_clipped]}"
}


# Main program to process PRO-seq reads.
#
# Globals: current
# Arguments:
#  $1 (optional) path to promap.cfg file.
# Returns: Minimal description of processing.
main() {
    # Make any errors fatal and propagate pipe error codes.
    set -eo pipefail

    check_dependencies

    config_read "$1"

    if ! [[ -d ${config[reads_dir]} ]]; then
	echo >&2 "Error: input reads directory does not exist: ${config[reads_dir]}"
	exit 1
    fi

    for file_reads in ${config[reads_dir]}/*; do
	current[file_reads]=$file_reads
	current[prefix]=$(basename $file_reads)
	current[prefix]=${current[prefix]%.fastq*}
	current[log_dir]=${config[log_dir]}/${current[prefix]}
	mkdir -p ${current[log_dir]}
	echo "Started processing reads for: ${current[file_reads]}"
	echo "Logging output to: ${current[log_dir]}/"
	umi_extract
	clip
    done
}


# Boilerplate for running `main()`.
[[ "$0" != "$BASH_SOURCE" ]] || main "$@"
